---
import { icons, type IconName } from '@/config/icons';
import type { ImageMetadata } from 'astro';

interface Props {
  name: IconName;
  size?: number | string;
  class?: string;
  title?: string;
  decorative?: boolean;
  color?: string;
}

const {
  name,
  size = 24,
  class: className = '',
  title,
  decorative = false,
  color = 'currentColor',
} = Astro.props;

const rawSvg = icons[name] as string | ImageMetadata;
const isRawSvg = typeof rawSvg === 'string';

let svgContent = '';
let svgUrl = '';

if (isRawSvg) {
  // ðŸ”‘ Normalizamos: quitamos width/height y reemplazamos fills
  svgContent = (rawSvg as string)
    .replace(/\s(width|height)="[^"]*"/g, '')
    .replace(/fill=".*?"/g, 'fill="currentColor"')
    .replace(/<path(?![^>]*fill)/g, '<path fill="currentColor"');
} else {
  svgUrl = (rawSvg as ImageMetadata)?.src ?? '';
}
---

{isRawSvg ? (
  <span
    class={`icon ${className}`}
    style={`display:inline-block; width:${
      typeof size === 'number' ? size + 'px' : size
    }; height:${typeof size === 'number' ? size + 'px' : size}; color:${color};`}
    role={decorative ? undefined : 'img'}
    aria-hidden={decorative ? 'true' : undefined}
    aria-label={!decorative && title ? title : undefined}
    set:html={svgContent}
  />
) : svgUrl ? (
  <img
    src={svgUrl}
    alt={decorative ? '' : title ?? ''}
    class={`icon ${className}`}
    width={typeof size === 'number' ? size : undefined}
    height={typeof size === 'number' ? size : undefined}
    style={typeof size === 'string' ? `width:${size}; height:${size};` : undefined}
    aria-hidden={decorative ? 'true' : undefined}
  />
) : null}

<style>
.icon {
  display: inline-block;
  line-height: 0;
  vertical-align: middle;
  color: inherit; /* ðŸ”‘ hereda color del contenedor */
}
</style>
